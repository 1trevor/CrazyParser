#!/usr/bin/python

'''
    This script uses urlcrazy to identify possible typosquatted domains.
    The output is compared against an existing list of typosquatted domains.
    If any new domains are identified, the results are mailed off for review
        and blocking in your web proxy.

    Dependencies:
        mydomains.csv
            This file contains a list of domains you wish to monitor. 

        knowndomains.csv
            This file contains domains already identified from previous
            runs. The file contains a header "Domain,Reason" and a list of
            domains, 1 per line. The reason will either be Squatter or
            Valid Site if the domain belongs to a legitimate site.

	output directory
            Currently, the script requires a directory named output located
            in the same directory as crazyParser.py. This directory contains
            the temporary output generated by URLCrazy.
	
        urlcrazy: installed at /usr/bin/urlcrazy. If this installed in an
            alternate location, the value of urlCrazy will need to be
            updated to reflect its location.
        
'''

import os
import subprocess
import csv
import smtplib
from email.MIMEMultipart import MIMEMultipart
from email.MIMEBase import MIMEBase
from email.MIMEText import MIMEText
from email import Encoders

docRoot = os.getcwd() # get current directory

# set up global files
resultsFile = os.path.join(docRoot,'results.csv')
myDomains = os.path.join(docRoot,'mydomains.csv')
knownDomains = os.path.join(docRoot,'knowndomains.csv')
outDir = os.path.join(docRoot,'output')  # output directory

urlCrazy = '/usr/bin/urlcrazy' # update if your installation differs

def doCrazy(resultsFile, myDomains):
    # cleanup old results file
    try:
        os.remove(resultsFile)
    except OSError: # file does not exist
        pass

    with open(myDomains, 'rb') as domains:
        reader = csv.reader(domains)
        for domain in domains:
            outfile = os.path.join(outDir,(domain.rstrip() + '.csv'))
            domain = domain.rstrip()
            subprocess.call('/usr/bin/urlcrazy -f csv' + ' -o ' + outfile + ' ' + domain, bufsize=4096, shell=True)
    
def parseOutput():

    # set up domains dictionary
    domains = []

    # compare known domains to discovered domains
    knowndom = []
    with open (knownDomains, 'rb') as domfile:
        reader = csv.DictReader(domfile)
        for row in reader:
            knowndom.append(row['Domain'])

    # Read all .csv into dictionary
    filedict = []
    for f in os.listdir(outDir):
        if f.endswith(".csv"):
            filedict.append(os.path.join(outDir, f))

    # Parse each file in dictionary
    for file in filedict:
        with open (file, 'rb') as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                if len(row) != 0:
                    if row['CC-A'] != "?":
                        if row['Typo'] in knowndom:
                            pass
                        else:
                            domains.append(row['Typo'])

    # write out results
    # this file will only contain the header if there are no new results
    with open(resultsFile, 'wb') as outfile:
        fieldnames = ['Domain']
        writer = csv.DictWriter(outfile, fieldnames=fieldnames)
        writer.writeheader()
        for row in domains:
            writer.writerow({'Domain': row})
    

def sendMail():

    '''
            sendMail sends the results of urlcrazy scans,
            including diffs to your selected address
            using a given address.

            Specify your sending account username in mail_user.
            Specify your account password in mail_pwd.

            Configure for your mail server by modifying the
            mailServer = line.

            This assumes your mail server supports starttls.
            Future versions will allow you to specify whether
            or not to use starttls. To suppress starttls,
            remove the line mailServer.starttls().

    '''

    mail_user = "mail_sender_account"
    mail_pwd = "your_pass_here"

    def mail(to, subject, text, attachment, numResults):
            msg = MIMEMultipart()

            msg['From'] = mail_user
            msg['To'] = to
            msg['Subject'] = subject

            msg.attach(MIMEText(text))

            # Attach the attachment if there are new results
            # numResults is the number of rows in the results file
            # This is always at least 1 due to the header row
            if numResults >= 2:
                part = MIMEBase('application', 'octet-stream')
                part.set_payload(open(attachment, 'rb').read())
                Encoders.encode_base64(part)
                part.add_header('Content-Disposition',
                        'attachment; filename="%s"' % os.path.basename(attachment))
                msg.attach(part)
            else:
                pass

            mailServer = smtplib.SMTP("smtp.gmail.com", 587)
            mailServer.ehlo()
            mailServer.starttls()
            mailServer.ehlo()
            mailServer.login(mail_user, mail_pwd)
            mailServer.sendmail(mail_user, to, msg.as_string())
            # Should be mailServer.quit(), but that crashes...
            mailServer.close()

    # define our attachment
    attachment = resultsFile
    
    # this counts the number of line in the results file
    # if it is 1, there were no results
    numResults = sum(1 for line in open(attachment))
    if numResults == 1:
        mail("recipient@addr.ess",
                "Daily DNS typosquatting recon report", # subject line
                "There were no new results in today's scan", # your message here
                attachment, numResults)

    else:
        mail("recipient_addr.ess",
                "Daily DNS typosquatting recon report", # subject line
                "The results from today's DNS typosquatting scan are attached", # your message here
                attachment, numResults)

def doCleanup():
    # Delete all temporary .csv files created by urlcrazy
    for f in os.listdir(outDir):
        if f.endswith(".csv"):
            os.remove(os.path.join(outDir, f))

            
# Make sure to clean up any stale output files
doCleanup()

# Execute urlcrazy
doCrazy(resultsFile, myDomains)

# parse output from urlcrazy
parseOutput()

# send results
sendMail()

# Clean up output files
doCleanup()
